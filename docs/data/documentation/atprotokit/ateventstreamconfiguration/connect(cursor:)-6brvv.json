{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"connect"},{"text":"(","kind":"text"},{"text":"cursor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"text":"? = nil) ","kind":"text"},{"kind":"keyword","text":"async"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"cursor","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The mark used to indicate the starting point for the next set of results. Optional."}]}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Normally, when connecting to the event stream, it will start from the first message the event stream gets. The client will always look at the last successful","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"sequencePosition"},{"text":" and stores it internally. However, the following can occur when ","type":"text"},{"type":"codeVoice","code":"cursor"},{"text":" is invloved:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"cursor","type":"codeVoice"},{"type":"text","text":" is higher than "},{"code":"sequencePosition","type":"codeVoice"},{"type":"text","text":", the connection will close after outputting an error."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"cursor","type":"codeVoice"},{"text":"is within the server’s rollback window, the server will attempt to give the client all of the messages it might have missed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"cursor"},{"type":"text","text":" is outside of the rollback window, then the server will send an info message saying it’s too old, then sends the oldest message it has and"},{"type":"text","text":" "},{"text":"continues the stream.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"cursor","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"text":", then the server will send the oldest message it has and continues the stream.","type":"text"}]}]}],"type":"unorderedList"}]}],"metadata":{"externalID":"s:10ATProtoKit26ATEventStreamConfigurationPAAE7connect6cursorys5Int64VSg_tYaF","remoteSource":{"url":"https:\/\/github.com\/MasterJ93\/ATProtoKit\/tree\/main\/Sources\/ATProtoKit\/APIReference\/ATEventStreamConfiguration\/ATEventStreamConfigurationExtension.swift#L24","fileName":"ATEventStreamConfigurationExtension.swift"},"modules":[{"name":"ATProtoKit"}],"role":"symbol","extendedModule":"ATProtoKit","title":"connect(cursor:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"cursor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"async"}],"symbolKind":"method","roleHeading":"Instance Method"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATEventStreamConfiguration","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATEventStreamConfiguration\/connect(cursor:)-2cckx"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATEventStreamConfiguration\/connect(cursor:)-6brvv"},"kind":"symbol","abstract":[{"type":"text","text":"Connects the client to the event stream."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/ateventstreamconfiguration\/connect(cursor:)-6brvv"]}],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATEventStreamConfiguration/connect(cursor:)-6brvv":{"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATEventStreamConfiguration\/connect(cursor:)-6brvv","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"text":"cursor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":"?) "},{"text":"async","kind":"keyword"}],"abstract":[{"type":"text","text":"Connects the client to the event stream."}],"url":"\/documentation\/atprotokit\/ateventstreamconfiguration\/connect(cursor:)-6brvv","kind":"symbol","title":"connect(cursor:)","type":"topic"},"doc://ATProtoKit/documentation/ATProtoKit":{"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","title":"ATProtoKit","images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"url":"\/documentation\/atprotokit","kind":"symbol","type":"topic","role":"collection","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}]},"doc://ATProtoKit/documentation/ATProtoKit/ATEventStreamConfiguration/connect(cursor:)-2cckx":{"type":"topic","abstract":[{"text":"Connects the client to the event stream.","type":"text"}],"title":"connect(cursor:)","kind":"symbol","defaultImplementations":1,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATEventStreamConfiguration\/connect(cursor:)-2cckx","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"cursor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"}],"required":true,"role":"symbol","url":"\/documentation\/atprotokit\/ateventstreamconfiguration\/connect(cursor:)-2cckx"},"atprotokit_logo.png":{"alt":"A technology icon representing the ATProtoKit framework.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/atprotokit_logo.png"}],"identifier":"atprotokit_logo.png"},"doc://ATProtoKit/documentation/ATProtoKit/ATEventStreamConfiguration":{"navigatorTitle":[{"kind":"identifier","text":"ATEventStreamConfiguration"}],"abstract":[{"text":"The base protocol which all data stream-related classes conform to.","type":"text"}],"title":"ATEventStreamConfiguration","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATEventStreamConfiguration","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ATEventStreamConfiguration","kind":"identifier"}],"url":"\/documentation\/atprotokit\/ateventstreamconfiguration","type":"topic"}}}