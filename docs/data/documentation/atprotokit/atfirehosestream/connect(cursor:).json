{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"cursor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":"? = nil) ","kind":"text"},{"kind":"keyword","text":"async"}]}],"kind":"declarations"},{"parameters":[{"name":"cursor","content":[{"inlineContent":[{"type":"text","text":"The mark used to indicate the starting point for the next set of results. Optional."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Normally, when connecting to the event stream, it will start from the first message the event stream gets. The client will always look at the last successful"},{"type":"text","text":" "},{"code":"sequencePosition","type":"codeVoice"},{"type":"text","text":" and stores it internally. However, the following can occur when "},{"type":"codeVoice","code":"cursor"},{"text":" is invloved:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"cursor"},{"text":" is higher than ","type":"text"},{"code":"sequencePosition","type":"codeVoice"},{"type":"text","text":", the connection will close after outputting an error."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"cursor"},{"type":"text","text":"is within the server’s rollback window, the server will attempt to give the client all of the messages it might have missed."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"cursor","type":"codeVoice"},{"text":" is outside of the rollback window, then the server will send an info message saying it’s too old, then sends the oldest message it has and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"continues the stream."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"cursor","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":", then the server will send the oldest message it has and continues the stream."}],"type":"paragraph"}]}]}]}],"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/connect(cursor:)","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","modules":[{"name":"ATProtoKit"}],"externalID":"s:10ATProtoKit26ATEventStreamConfigurationPAAE7connect6cursorys5Int64VSg_tYaF::SYNTHESIZED::s:10ATProtoKit16ATFirehoseStreamC","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"cursor"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"}],"remoteSource":{"url":"https:\/\/github.com\/MasterJ93\/ATProtoKit\/tree\/main\/Sources\/ATProtoKit\/APIReference\/ATEventStreamConfiguration\/ATEventStreamConfigurationExtension.swift#L24","fileName":"ATEventStreamConfigurationExtension.swift"},"title":"connect(cursor:)","extendedModule":"ATProtoKit"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Connects the client to the event stream.","type":"text"}],"variants":[{"paths":["\/documentation\/atprotokit\/atfirehosestream\/connect(cursor:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/ATEventStreamConfiguration-Implementations"]]},"kind":"symbol","sections":[],"references":{"doc://ATProtoKit/documentation/ATProtoKit/ATFirehoseStream/ATEventStreamConfiguration-Implementations":{"url":"\/documentation\/atprotokit\/atfirehosestream\/ateventstreamconfiguration-implementations","title":"ATEventStreamConfiguration Implementations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/ATEventStreamConfiguration-Implementations","abstract":[],"kind":"article"},"doc://ATProtoKit/documentation/ATProtoKit/ATFirehoseStream":{"type":"topic","title":"ATFirehoseStream","navigatorTitle":[{"text":"ATFirehoseStream","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ATFirehoseStream"}],"kind":"symbol","abstract":[{"text":"The base class for Bluesky’s Firehose event stream.","type":"text"}],"url":"\/documentation\/atprotokit\/atfirehosestream","role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream"},"doc://ATProtoKit/documentation/ATProtoKit/ATFirehoseStream/connect(cursor:)":{"type":"topic","title":"connect(cursor:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"connect"},{"text":"(","kind":"text"},{"text":"cursor","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"}],"abstract":[{"text":"Connects the client to the event stream.","type":"text"}],"kind":"symbol","url":"\/documentation\/atprotokit\/atfirehosestream\/connect(cursor:)","role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATFirehoseStream\/connect(cursor:)"},"doc://ATProtoKit/documentation/ATProtoKit":{"kind":"symbol","images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"type":"topic","url":"\/documentation\/atprotokit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","title":"ATProtoKit","abstract":[{"text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky.","type":"text"}],"role":"collection"},"atprotokit_logo.png":{"variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"identifier":"atprotokit_logo.png","type":"image","alt":"A technology icon representing the ATProtoKit framework."}}}