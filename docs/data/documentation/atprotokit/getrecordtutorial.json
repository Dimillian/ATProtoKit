{"abstract":[{"type":"text","text":"Get records easily without explicit pattern matching in only one line."}],"kind":"article","sections":[],"metadata":{"title":"Retrieving Records with getRecord()","roleHeading":"Article","modules":[{"name":"ATProtoKit"}],"role":"article"},"seeAlsoSections":[{"identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"],"title":"Related Documentation"},{"generated":true,"title":"UnknownType","identifiers":["doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Records are one of the most important aspects of the AT Protocol, as it’s what allows you to create posts, likes, reposts, and more. As a result, you’ll be referencing them often. All records in ATProtoKit conform to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol"},{"text":", and any lexicon models that have records as the value will have ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"type":"text","text":" as the value type. Typically speaking, when referencing a record, you would use "},{"type":"codeVoice","code":"if case let"},{"text":" or ","type":"text"},{"code":"guard case let","type":"codeVoice"},{"type":"text","text":", and then grab the results from there. However, doing this requires using multiple lines and handling different scopes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To solve this problem, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType"},{"type":"text","text":" has a public method method, named "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)"},{"type":"text","text":". This will allow you to reference a record in one line."}]},{"text":"Referencing a Record","type":"heading","anchor":"Referencing-a-Record","level":2},{"inlineContent":[{"text":"You can call the method on a property that has ","type":"text"},{"type":"reference","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","isActive":true},{"text":" as the value type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["do {","    let postArray = atProto.searchPosts(with: \"atprotokit\")","    let post = postArray.posts[0].record.getRecord(ofType: AppBskyLexicon.Feed.PostRecord.self).text","} catch {","    \/\/ error...","}"]},{"inlineContent":[{"type":"text","text":"There’s one required parameter used tell the method which "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" to decode the JSON response to. Make sure you add "},{"code":".self","type":"codeVoice"},{"type":"text","text":" at the end of the name of the "},{"type":"codeVoice","code":"struct"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"These are all of the requirements of ","type":"text"},{"type":"codeVoice","code":"getRecord()"},{"type":"text","text":". You can continue to chain the properties as normal."}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atprotokit\/getrecordtutorial"]}],"hierarchy":{"paths":[["doc:\/\/ATProtoKit\/documentation\/ATProtoKit"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/getRecordTutorial","interfaceLanguage":"swift"},"references":{"doc://ATProtoKit/documentation/ATProtoKit/CodableValue":{"role":"symbol","title":"CodableValue","navigatorTitle":[{"text":"CodableValue","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"A type-safe and thread-safe representation of JSON-compatible values, used for encoding and","type":"text"},{"text":" ","type":"text"},{"text":"decoding arbitrary JSON data.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodableValue"}],"url":"\/documentation\/atprotokit\/codablevalue","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/CodableValue"},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType":{"role":"symbol","title":"UnknownType","url":"\/documentation\/atprotokit\/unknowntype","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnknownType"}],"type":"topic","navigatorTitle":[{"text":"UnknownType","kind":"identifier"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType","abstract":[{"text":"Handles decoding and encoding of records when their type is not known ahead of type.","type":"text"}],"kind":"symbol"},"doc://ATProtoKit/documentation/ATProtoKit":{"images":[{"type":"icon","identifier":"atprotokit_logo.png"}],"kind":"symbol","abstract":[{"type":"text","text":"Develop and manage client and server-side applications for the AT Protocol and Bluesky."}],"type":"topic","title":"ATProtoKit","url":"\/documentation\/atprotokit","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit","role":"collection"},"atprotokit_logo.png":{"type":"image","identifier":"atprotokit_logo.png","variants":[{"url":"\/images\/atprotokit_logo.png","traits":["1x","light"]}],"alt":"A technology icon representing the ATProtoKit framework."},"doc://ATProtoKit/documentation/ATProtoKit/ATRecordProtocol":{"role":"symbol","kind":"symbol","url":"\/documentation\/atprotokit\/atrecordprotocol","type":"topic","title":"ATRecordProtocol","navigatorTitle":[{"kind":"identifier","text":"ATRecordProtocol"}],"identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/ATRecordProtocol","abstract":[{"type":"text","text":"The common interface for record structs in the AT Protocol."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ATRecordProtocol","kind":"identifier"}]},"doc://ATProtoKit/documentation/ATProtoKit/UnknownType/getRecord(ofType:)":{"role":"symbol","identifier":"doc:\/\/ATProtoKit\/documentation\/ATProtoKit\/UnknownType\/getRecord(ofType:)","url":"\/documentation\/atprotokit\/unknowntype\/getrecord(oftype:)","abstract":[{"type":"text","text":"Attempts to retrieve a record of the specified type from an "},{"code":"UnknownType","type":"codeVoice"},{"text":" instance.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getRecord"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"ofType","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"title":"getRecord(ofType:)","kind":"symbol"}}}